{
  "version": 3,
  "sources": ["../lib/meta.json", "../lib/types.json", "../lib/data.js", "../lib/inv.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n  \"nargs\": 7,\n  \"nin\": 1,\n  \"nout\": 1\n}\n", "[12,12,12,17,11,11,11,12,11,17,17,17,6,12,6,17,4,11,4,12,4,17,1,11,1,12,1,17,7,12,7,17,5,11,5,12,5,17,2,11,2,12,2,17,3,11,3,12,3,17]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable stdlib/capitalized-comments */\n\n'use strict';\n\n// MODULES //\n\nvar inv = require( '@stdlib/math-base-special-inv' );\nvar invf = require( '@stdlib/math-base-special-invf' );\n\n\n// MAIN //\n\nvar data = [\n\t// NOTE: the following **must** match the order in `./types.json`. The order should be according to likelihood of use (e.g., if `float64` arrays are more likely, then `float64` types/data should come before `uint8`).\n\n\t// float64\n\tinv,\n\tinv,\n\n\t// float32\n\tinvf,\n\tinv,\n\tinv,\n\n\t// generic\n\tinv,\n\n\t// int32\n\tinv,\n\tinv,\n\n\t// int16\n\tinvf,\n\tinv,\n\tinv,\n\n\t// int8\n\tinvf,\n\tinv,\n\tinv,\n\n\t// uint32\n\tinv,\n\tinv,\n\n\t// uint16\n\tinvf,\n\tinv,\n\tinv,\n\n\t// uint8\n\tinvf,\n\tinv,\n\tinv,\n\n\t// uint8c\n\tinvf,\n\tinv,\n\tinv\n];\n\n\n// EXPORTS //\n\nmodule.exports = data;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dispatch = require( '@stdlib/strided-dispatch' );\nvar unary = require( '@stdlib/strided-base-unary' );\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar types = require( './types.json' );\nvar meta = require( './meta.json' );\nvar data = require( './data.js' );\n\n\n// VARIABLES //\n\nvar fcn = dispatch( unary, types, data, meta.nargs, meta.nin, meta.nout );\n\n\n// MAIN //\n\n/**\n* Computes the multiplicative inverse for each element in a strided array `x` and assigns the results to elements in a strided array `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {*} dtypeX - `x` data type\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {*} dtypeY - `y` data type\n* @param {Collection} y - destination array\n* @param {integer} strideY - `y` stride length\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} fourth argument must be an integer\n* @throws {TypeError} sixth argument must be an array-like object\n* @throws {TypeError} seventh argument must be an integer\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {RangeError} third argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} sixth argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n* @returns {Collection} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0, 10.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* inv( x.length, 'float64', x, 1, 'float64', y, 1 );\n* // y => <Float64Array>[ -0.05, -1.0, 0.5, 0.25, 0.1 ]\n*/\nfunction inv( N, dtypeX, x, strideX, dtypeY, y, strideY ) {\n\treturn fcn( N, resolve( dtypeX ), x, strideX, resolve( dtypeY ), y, strideY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = inv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dispatch = require( '@stdlib/strided-dispatch' );\nvar unary = require( '@stdlib/strided-base-unary' ).ndarray;\nvar resolve = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar types = require( './types.json' );\nvar meta = require( './meta.json' );\nvar data = require( './data.js' );\n\n\n// VARIABLES //\n\nvar fcn = dispatch( unary, types, data, meta.nargs+meta.nin+meta.nout, meta.nin, meta.nout ); // eslint-disable-line max-len\n\n\n// MAIN //\n\n/**\n* Computes the multiplicative inverse for each element in a strided array `x` and assigns the results to elements in a strided array `y`.\n*\n* @param {integer} N - number of indexed elements\n* @param {*} dtypeX - `x` data type\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {*} dtypeY - `y` data type\n* @param {Collection} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @throws {TypeError} first argument must be an integer\n* @throws {TypeError} third argument must be an array-like object\n* @throws {TypeError} fourth argument must be an integer\n* @throws {TypeError} fifth argument must be a nonnegative integer\n* @throws {TypeError} seventh argument must be an array-like object\n* @throws {TypeError} eighth argument must be an integer\n* @throws {TypeError} ninth argument must be a nonnegative integer\n* @throws {Error} insufficient arguments\n* @throws {Error} too many arguments\n* @throws {RangeError} third argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {RangeError} seventh argument has insufficient elements based on the associated stride and the number of indexed elements\n* @throws {TypeError} unable to resolve a strided array function supporting the provided array argument data types\n* @returns {Collection} `y`\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0, 10.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* inv( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 );\n* // y => <Float64Array>[ -0.05, -1.0, 0.5, 0.25, 0.1 ]\n*/\nfunction inv( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY ) {\n\treturn fcn( N, resolve( dtypeX ), x, strideX, offsetX, resolve( dtypeY ), y, strideY, offsetY ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = inv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setProps = require( '@stdlib/strided-base-meta-data-props' );\nvar meta = require( './meta.json' );\nvar types = require( './types.json' );\nvar inv = require( './inv.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( inv, 'ndarray', ndarray );\nsetProps( meta, types, inv, false );\nsetProps( meta, types, inv.ndarray, true );\n\n\n// EXPORTS //\n\nmodule.exports = inv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the multiplicative inverse for each element in a strided array `x` and assign the results to elements in a strided array `y`.\n*\n* @module @stdlib/math-strided-special-inv\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var inv = require( '@stdlib/math-strided-special-inv' );\n*\n* var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0, 10.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* inv( x.length, 'float64', x, 1, 'float64', y, 1 );\n* // y => <Float64Array>[ -0.05, -1.0, 0.5, 0.25, 0.1 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var inv = require( '@stdlib/math-strided-special-inv' );\n*\n* var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0, 10.0 ] );\n* var y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* inv.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 );\n* // y => <Float64Array>[ -0.05, -1.0, 0.5, 0.25, 0.1 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar javascript = require( './main.js' );\n\n\n// MAIN //\n\nvar main;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( tmp instanceof Error ) {\n\tmain = javascript;\n} else {\n\tmain = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SACE,MAAS,EACT,IAAO,EACP,KAAQ,CACV,ICJA,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,CAAAA,EAAA,SAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,ICAnI,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAwBA,IAAIC,EAAM,QAAS,+BAAgC,EAC/CC,EAAO,QAAS,gCAAiC,EAKjDC,EAAO,CAIVF,EACAA,EAGAC,EACAD,EACAA,EAGAA,EAGAA,EACAA,EAGAC,EACAD,EACAA,EAGAC,EACAD,EACAA,EAGAA,EACAA,EAGAC,EACAD,EACAA,EAGAC,EACAD,EACAA,EAGAC,EACAD,EACAA,CACD,EAKAD,EAAO,QAAUG,IClFjB,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAC/CC,EAAQ,QAAS,4BAA6B,EAC9CC,EAAU,QAAS,yCAA0C,EAC7DC,EAAQ,IACRC,EAAO,IACPC,EAAO,IAKPC,EAAMN,EAAUC,EAAOE,EAAOE,EAAMD,EAAK,MAAOA,EAAK,IAAKA,EAAK,IAAK,EAoCxE,SAASG,EAAKC,EAAGC,EAAQC,EAAGC,EAASC,EAAQC,EAAGC,EAAU,CACzD,OAAOR,EAAKE,EAAGN,EAASO,CAAO,EAAGC,EAAGC,EAAST,EAASU,CAAO,EAAGC,EAAGC,CAAQ,CAC7E,CAKAf,EAAO,QAAUQ,IC3EjB,IAAAQ,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAC/CC,EAAQ,QAAS,4BAA6B,EAAE,QAChDC,EAAU,QAAS,yCAA0C,EAC7DC,EAAQ,IACRC,EAAO,IACPC,EAAO,IAKPC,EAAMN,EAAUC,EAAOE,EAAOE,EAAMD,EAAK,MAAMA,EAAK,IAAIA,EAAK,KAAMA,EAAK,IAAKA,EAAK,IAAK,EAwC3F,SAASG,EAAKC,EAAGC,EAAQC,EAAGC,EAASC,EAASC,EAAQC,EAAGC,EAASC,EAAU,CAC3E,OAAOV,EAAKE,EAAGN,EAASO,CAAO,EAAGC,EAAGC,EAASC,EAASV,EAASW,CAAO,EAAGC,EAAGC,EAASC,CAAQ,CAC/F,CAKAjB,EAAO,QAAUQ,IC/EjB,IAAAU,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAW,QAAS,sCAAuC,EAC3DC,EAAO,IACPC,EAAQ,IACRC,EAAM,IACNC,EAAU,IAKdL,EAAaI,EAAK,UAAWC,CAAQ,EACrCJ,EAAUC,EAAMC,EAAOC,EAAK,EAAM,EAClCH,EAAUC,EAAMC,EAAOC,EAAI,QAAS,EAAK,EAKzCL,EAAO,QAAUK,ICSjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAa,IAKbC,EACAC,EAAMH,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDI,aAAe,MACnBD,EAAOD,EAEPC,EAAOC,EAMR,OAAO,QAAUD",
  "names": ["require_meta", "__commonJSMin", "exports", "module", "require_types", "__commonJSMin", "exports", "module", "require_data", "__commonJSMin", "exports", "module", "inv", "invf", "data", "require_inv", "__commonJSMin", "exports", "module", "dispatch", "unary", "resolve", "types", "meta", "data", "fcn", "inv", "N", "dtypeX", "x", "strideX", "dtypeY", "y", "strideY", "require_ndarray", "__commonJSMin", "exports", "module", "dispatch", "unary", "resolve", "types", "meta", "data", "fcn", "inv", "N", "dtypeX", "x", "strideX", "offsetX", "dtypeY", "y", "strideY", "offsetY", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "setProps", "meta", "types", "inv", "ndarray", "join", "tryRequire", "javascript", "main", "tmp"]
}
